[{"path":"https://tricktracktriu.github.io/biviz/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 biviz authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tricktracktriu.github.io/biviz/authors.html","id":null,"dir":"","previous_headings":"","what":"Autor:innen","title":"Autor:innen und Zitation","text":"Andriu Cavelti. Autor:, Maintainer:.","code":""},{"path":"https://tricktracktriu.github.io/biviz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Zitationsvorschlag","title":"Autor:innen und Zitation","text":"Cavelti (2023). biviz: Visualisierungstools f√ºr einfache Grafiken. https://tricktracktriu.github.io/biviz/, https://github.com/tricktracktriu/biviz/.","code":"@Manual{,   title = {biviz: Visualisierungstools f√ºr einfache Grafiken},   author = {Andriu Cavelti},   year = {2023},   note = {https://tricktracktriu.github.io/biviz/, https://github.com/tricktracktriu/biviz/}, }"},{"path":"https://tricktracktriu.github.io/biviz/index.html","id":"biviz","dir":"","previous_headings":"","what":"Visualisierungstools f√ºr einfache Grafiken","title":"Visualisierungstools f√ºr einfache Grafiken","text":"Mit biviz k√∂nnen h√§ufig verwendete Datenvisualisierungen mit einfachen Funktionen erstellt werden. biviz stellt insbesondere Datenvisualisierungen die oft im Bereich Business Intelligence (BI) verwendet werden zur Verf√ºgung. Das Paket implementiert Trends der Datenvisualisierung, wodurch sich das Paket auch f√ºr andere Zwecke eignet. biviz werden ggplot2 Wrapper zur Verf√ºgung gestellt, welche die g√§ngigen Datenvisualisierungen erzeugen. Dies hat zum Vorteil, dass bei Standardgrafiken die Datenvisualisierung nicht Schicht f√ºr Schicht programmiert werden, wie es beim ggplot2 Framework vorgesehen ist. Eine Zeile Code reicht um eine Datenvisualisierung zu erstellen. Da das Paket auf ggplot2 aufbaut kann das erzeugte Objekt, zu einem sp√§teren Zeitpunkt dennoch angepasst werden. Die Datenvisualisierungen orientieren sich Buch Data Visualization von Claus O. Wilke üìì Mehr Details zur Entwicklung des Pakets findest du meiner Masterarbeit.","code":""},{"path":"https://tricktracktriu.github.io/biviz/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualisierungstools f√ºr einfache Grafiken","text":"Das Paket biviz kann direkt von GitHub installiert werden:","code":"# install.packages(\"devtools\") devtools::install_github(\"tricktracktriu/biviz\")"},{"path":"https://tricktracktriu.github.io/biviz/index.html","id":"intro","dir":"","previous_headings":"","what":"Intro","title":"Visualisierungstools f√ºr einfache Grafiken","text":"Um die Wrapper schlank zu halten, werden bei den meisten Funktionen biviz die Daten vor der √úbergabe die Funktion aufbereitet, dass der Visualisierung die Datenpunkte den Daten abgebildet werden und keine Berechnungen innerhalb der Visualisierungsfunktion vorgenommen werden. Die Visualisierungen sind 4 Gruppen (amounts, distributions, proportions und time series) aufgeteilt und folgen immer der gleichen Syntax. Jede Funktion startet mit plot_* anschliessend wird die Gruppe definiert plot_amounts_* und Ende die Form plot_amounts_grouped. üìã Alle Funktionen sind im Verzeichnis dokumentiert.","code":""},{"path":"https://tricktracktriu.github.io/biviz/index.html","id":"beispiele","dir":"","previous_headings":"","what":"Beispiele","title":"Visualisierungstools f√ºr einfache Grafiken","text":"","code":"plot1 <-    # informationen zu den daten:    # https://kjhealy.github.io/socviz/reference/   socviz::gss_lon |>    drop_na() |>   plot_distributions_sidebyside(     as.numeric(age),      group = sex,      bw = 3     )  plot1"},{"path":"https://tricktracktriu.github.io/biviz/index.html","id":"datenvisualisierungen-verfeinern","dir":"","previous_headings":"Beispiele","what":"Datenvisualisierungen verfeinern","title":"Visualisierungstools f√ºr einfache Grafiken","text":"Da der Output von biviz ein ggplot2 Objekt ist, k√∂nnen es anschliessend innerhalb des ggplot2 Frameworks weiter bearbeitet werden. Der ganze Datensatz aus dem Beipsiel stehen unter opendata.swiss frei zur Verf√ºgung.","code":"df <-    biviz::sample_abfall_zh  ## raw plot plot_abfall_zh_raw <-    # biviz funktion   plot_amounts_vertical(     data = df,     # die daten haben keine logische reihenfolge, deshalb werden sie     # der gr√∂sse nach sortiert. dies geschieht mit forcats::fct_reorder     x = fct_reorder(Gemeinde, Wert),     y = Wert     )   plot_abfall_zh_raw ## make the plot nice plot_abfall_zh_nice <-    # das vorherige ggplot2 objekt wird verwendet   plot_abfall_zh_raw +   # kontext hinzuf√ºgen   ggtitle(\"Anzahl Brennbare Abf√§lle und Sperrgut\\nje Gemeinde im Jahr 2021\") +     labs(     x = \"Gemeinde\",     y = \"Menge in Tonnen\"     ) +   theme(legend.position = \"none\")  plot_abfall_zh_nice ## let the plot shine plot_abfall_zh_shine <-    # das vorherige ggplot2 objekt wird verwendet   plot_abfall_zh_nice +   # mit diesem schritt werden alle balken ausser, der hervorzuhebende grau   # \"√ºbermalt\" indem ein neuer layer auf die visualisierung gelegt wird   geom_col(     data = filter(df,                    abfall_pro_person != min(df$abfall_pro_person)                   ),     mapping = aes(       x = fct_reorder(Gemeinde, Wert),       y = Wert       ),     fill = \"lightgrey\",     position = \"dodge\"            ) +   ggtitle(     # mit dem paket ggtext kann html/markdown code im text verwendet werden     paste0(       \"<span style = 'color:lightgrey;'>Im Jahr 2021 hatte die<\/span><br>\",       \"<span style = 'color:#0d7abc; style = font-size:24pt'>       Gemeinde Affoltern a.A.<\/span><br>\",       \" total am meisten \",       \"<span style = 'color:lightgrey;'>brennbare Abf√§lle und Sperrgut<\/span><br>\",       \"<span style = 'color:lightgrey;'>aber<\/span>\",       \" pro Kopf am wenigsten (5.6 Tonnen)\"       #\"<span style = 'color:lightgrey;'>Menge<\/span>\"       )     ) +   labs(y = \"Totale Abfallmenge\\nin Tonnen\") +   # damit der html/markdown code im text gerendert werden kann, ben√∂tigt es    # die funktion element_markdown   theme(     plot.title = ggtext::element_markdown(size = 14),     axis.title.x = element_blank(),     axis.title.y = element_text(size = 11, vjust = 3)     )  plot_abfall_zh_shine"},{"path":"https://tricktracktriu.github.io/biviz/index.html","id":"hilfe","dir":"","previous_headings":"","what":"Hilfe","title":"Visualisierungstools f√ºr einfache Grafiken","text":"Die einzelnen Dokumentationen zu den Funktionen sind mit help() oder ?function ersichtlich alternativ kann mit example() Beispiele aufgerufen werden.","code":"?plot_distributions_raincloud"},{"path":"https://tricktracktriu.github.io/biviz/reference/abfall_zh.html","id":null,"dir":"Reference","previous_headings":"","what":"Datensatz: Abfallmengen nach Abfallarten und Gemeinden des Kanton Zuerichs ‚Äî abfall_zh","title":"Datensatz: Abfallmengen nach Abfallarten und Gemeinden des Kanton Zuerichs ‚Äî abfall_zh","text":"Eine Teilmenge ist im Datensatz sample_abfall_zh zusammengefasst und mit Informationen vom Gemeindeportraet erg√§nzt.","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/abfall_zh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Verwendung","title":"Datensatz: Abfallmengen nach Abfallarten und Gemeinden des Kanton Zuerichs ‚Äî abfall_zh","text":"","code":"abfall_zh"},{"path":"https://tricktracktriu.github.io/biviz/reference/abfall_zh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Datensatz: Abfallmengen nach Abfallarten und Gemeinden des Kanton Zuerichs ‚Äî abfall_zh","text":"Ein Datensatz mit 6 Variablen und 34668 Zeilen: Jahr Jahr der Erhebung Gemeinde_Nr Kantonale Gemeinde ID Gemeinde Name der Gemeinde Abfallart Spezifizierung des Abfalles Wert numerische Mengenangabe Einheit Masseinheit des Wertes","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/abfall_zh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Datensatz: Abfallmengen nach Abfallarten und Gemeinden des Kanton Zuerichs ‚Äî abfall_zh","text":"Quelle: opendata.swiss","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_amounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Mengen visualisieren. plot_amounts_* Familie. ‚Äî plot_amounts_vertical","title":"Mengen visualisieren. plot_amounts_* Familie. ‚Äî plot_amounts_vertical","text":"Mengen visualisieren. plot_amounts_* Familie.","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_amounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Verwendung","title":"Mengen visualisieren. plot_amounts_* Familie. ‚Äî plot_amounts_vertical","text":"","code":"plot_amounts_vertical(data, x, y, color = \"#0d7abc\")  plot_amounts_horizontal(data, x, y, color = \"#0d7abc\")  plot_amounts_grouped(data, x, y, group)  plot_amounts_facets(data, x, y, facet, n_col = 2, color = \"#0d7abc\")  plot_amounts_stacked(data, x, y, group)"},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_amounts.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Mengen visualisieren. plot_amounts_* Familie. ‚Äî plot_amounts_vertical","text":"data Ein Tibble mit den Daten f√ºr den Plot. x Die Variable f√ºr die x-Achse. y Die Variable f√ºr die y-Achse. color Farbe der Balken. Default = #0d7abc. group Gruppierungsvariable f√ºr einen einzelnen Plot. facet Gruppierungsvariable um mehrere Plots zu machen (Facetten). n_col Anzahl Spalten bei den Facetten. Default = 2.","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_amounts.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"R√ºckgabewert","title":"Mengen visualisieren. plot_amounts_* Familie. ‚Äî plot_amounts_vertical","text":"ggplot object","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_amounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"Mengen visualisieren. plot_amounts_* Familie. ‚Äî plot_amounts_vertical","text":"","code":"df <- tibble::tibble(   x = c(\"a\", \"b\", \"c\", \"d\", \"e\"),   y = 1:5   )  plot_amounts_vertical(df, x, y)   socviz::gss_lon |>  tidyr::drop_na(degree) |>  dplyr::count(age, degree) |>  plot_amounts_facets(x = age, y = n, facet = degree) #> Don't know how to automatically pick scale for object of type <labelled>. #> Defaulting to continuous. #> Warning: Removed 5 rows containing missing values (`position_stack()`).   socviz::gss_lon |>  dplyr::count(sex, degree) |>  plot_amounts_stacked(x = degree, y = n, group = sex)   socviz::gss_lon |>  dplyr::count(sex, degree) |>  plot_amounts_grouped(x = sex, y = n, group = degree) +  # farbe manuell anpassen  colorspace::scale_fill_discrete_sequential(palette = \"Purples 2\") #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale."},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Verteilungen visualisieren. plot_distributions_* Familie. ‚Äî plot_distributions_histogram","title":"Verteilungen visualisieren. plot_distributions_* Familie. ‚Äî plot_distributions_histogram","text":"Hinweis: Die Daten duerfen nicht aggregiert sein. Die Berechnung erfolgt der Funktion.","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Verwendung","title":"Verteilungen visualisieren. plot_distributions_* Familie. ‚Äî plot_distributions_histogram","text":"","code":"plot_distributions_histogram(data, x, bw = 5, color = \"#0d7abc\")  plot_distributions_density(data, x, bw = 5, color = \"#0d7abc\")  plot_distributions_sidebyside(data, x, group, bw = 5)  plot_distributions_grouped(data, x, group, bw = 5)  plot_distributions_raincloud(data, x, y, bw = 5, color = \"#0d7abc\")  plot_distributions_boxplot(data, x, y, bw = 5, color = \"#0d7abc\", size = 5)"},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_distributions.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Verteilungen visualisieren. plot_distributions_* Familie. ‚Äî plot_distributions_histogram","text":"data Ein Tibble mit den Daten f√ºr den Plot. x Variable die untersucht wird (x-Achse). bw Breite (Anzahl werte die zusammengefasst werden) der Beh√§lter. Mehr Infos beim Argument bw der ggplot2 Dokumentation color Farbe um die Balken optisch zu trennen. group Variable um die Daten zu gruppieren. y Variable die untersucht wird (y-Achse). size Gr√∂sse der Schrift.","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_distributions.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"R√ºckgabewert","title":"Verteilungen visualisieren. plot_distributions_* Familie. ‚Äî plot_distributions_histogram","text":"ggplot2 object","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"Verteilungen visualisieren. plot_distributions_* Familie. ‚Äî plot_distributions_histogram","text":"","code":"df <-   socviz::gss_lon |>    tidyr::drop_na(sex)  cowplot::plot_grid(   plot_distributions_histogram(data = df, x = age),   plot_distributions_histogram(data = df, x = age, bw = 2),   labels = c('A: bw = 5 (default)', 'B: bw = 2')   ) #> Die untersuchte Variable (x) beinhaltet 221 NAs. #> Die untersuchte Variable (x) beinhaltet 221 NAs. #> Don't know how to automatically pick scale for object of type <labelled>. #> Defaulting to continuous. #> Warning: Removed 221 rows containing non-finite values (`stat_bin()`). #> Don't know how to automatically pick scale for object of type <labelled>. #> Defaulting to continuous. #> Warning: Removed 221 rows containing non-finite values (`stat_bin()`).   # mit pipe syntax df |>   tidyr::drop_na(happy) |>   plot_distributions_grouped(x = age, group = happy, bw = 3) #> Die untersuchte Variable (x) beinhaltet 187 NAs. #> Don't know how to automatically pick scale for object of type <labelled>. #> Defaulting to continuous. #> Warning: Removed 187 rows containing non-finite values (`stat_density()`).   # ohne pipe   plot_distributions_sidebyside(data = df, x = age, group = sex) #> Die untersuchte Variable (x) beinhaltet 221 NAs. #> Warning: Removed 442 rows containing non-finite values (`stat_density()`). #> Warning: Removed 221 rows containing non-finite values (`stat_density()`).   df |>   # jede 100th Zeile im df behalten   # notwendig, da ansonsten zu grosse   # datenmenge f√ºr diesen plot   dplyr::filter(dplyr::row_number() %% 100 == 1) |>   plot_distributions_raincloud(x = happy, y = age) #> Die untersuchte Variable (x) beinhaltet 41 NAs. #> Warning: Removed 3 rows containing non-finite values (`stat_boxplot()`). #> Warning: Removed 3 rows containing missing values (`stat_slabinterval()`). #> Warning: Removed 3 rows containing missing values (`geom_point()`).   cowplot::plot_grid(   plot_distributions_raincloud(data = df, x = happy, y = age),   plot_distributions_boxplot(data = df, x = happy, y = age, size = 3),   labels = c(\"A: Zuviele Datenpunkte f√ºr raincloud plot.\",              \"B: Beobachtungen als Zahl darstellen.\"              ),   ncol = 1   ) #> Die untersuchte Variable (x) beinhaltet 4756 NAs. #> Die untersuchte Variable (x) beinhaltet 4756 NAs. #> Warning: Removed 221 rows containing non-finite values (`stat_boxplot()`). #> Warning: Removed 221 rows containing missing values (`stat_slabinterval()`). #> Warning: Removed 221 rows containing missing values (`geom_point()`). #> Warning: Removed 221 rows containing non-finite values (`stat_boxplot()`). #> Warning: Removed 221 rows containing non-finite values (`stat_summary()`). #> Warning: Removed 221 rows containing missing values (`stat_slabinterval()`)."},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_proportions.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportionen visualisieren. plot_proportions_* Familie. ‚Äî plot_proportions_bar","title":"Proportionen visualisieren. plot_proportions_* Familie. ‚Äî plot_proportions_bar","text":"\"Hinweis: Daten den Dichteplots (density) duerfen nicht aggregiert sein. Die Berechnung erfolgt der Funktion.","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_proportions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Verwendung","title":"Proportionen visualisieren. plot_proportions_* Familie. ‚Äî plot_proportions_bar","text":"","code":"plot_proportions_bar(data, group, percent = percent, n = n)  plot_proportions_donut(data, group, n = n, percent = percent)  plot_proportions_stacked(data, x, y, group)  plot_proportions_sidebyside_bar(data, x, y, color, facet)  plot_proportions_sidebyside_density1(   data,   x,   group,   bw = 5,   color = \"#0d7abc\",   facet_row = 1 )  plot_proportions_sidebyside_density2(   data,   x,   group,   bw = 5,   color = \"#0d7abc\",   facet_row = 1 )"},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_proportions.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Proportionen visualisieren. plot_proportions_* Familie. ‚Äî plot_proportions_bar","text":"data Ein Tibble mit den Daten f√ºr den Plot. group Gruppierungsvariable f√ºr einen einzelnen Plot. percent Prozentangabe als Dezimalzahl (0.0 bis 1.0) n Der Wert zum ploten. x Die Variable f√ºr die x-Achse. y Die Variable f√ºr die y-Achse. color Farbe um Gruppierungen zu markieren. facet Gruppierungsvariable um einen Plot je Teilaspekt zu machen (Facetten). bw Breite (Anzahl werte die zusammengefasst werden) der Beh√§lter. Mehr Infos beim Argument bw der ggplot2 Dokumentation facet_row Anzahl Zeilen f√ºr Darstellung der Teilaspekte.","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_proportions.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"R√ºckgabewert","title":"Proportionen visualisieren. plot_proportions_* Familie. ‚Äî plot_proportions_bar","text":"ggplot object","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_proportions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"Proportionen visualisieren. plot_proportions_* Familie. ‚Äî plot_proportions_bar","text":"","code":"df1 <- tibble::tibble(   x = c(\"a\", \"b\", \"c\"),   y = c(3, 7, 10)   )  df1 |>   dplyr::mutate(percent = y / sum(y)) |>   plot_proportions_bar(group = x, n = y, percent = percent)   # aufbereitung der daten df2 <- socviz::gss_sib |>   dplyr::count(year, sex) |>   dplyr::group_by(year) |>   dplyr::mutate(sum_year = sum(n)) |>   dplyr::group_by(year, sex) |>   dplyr::summarise(percent = n / sum_year) |>   dplyr::ungroup() #> `summarise()` has grouped output by 'year'. You can override using the #> `.groups` argument.  # mit pipe syntax df2 |>   plot_proportions_stacked(x = year, y = percent, group = sex)   # ohne pipe plot_proportions_sidebyside_bar(data = df2, x = year, y = percent, color = sex, facet = sex)   socviz::gss_lon |>   plot_proportions_sidebyside_density1(x = as.numeric(age), group = happy) #> Hinweis: Die Daten duerfen nicht aggregiert sein. Die Berechnung erfolgt in der Funktion. Die untersuchte Variable (x) beinhaltet 221 NAs. #> Warning: Removed 884 rows containing non-finite values (`stat_density()`). #> Warning: Removed 221 rows containing non-finite values (`stat_density()`)."},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Zeitreihen visualisieren. plot_timeseries_* Familie. ‚Äî plot_timeseries_slope","title":"Zeitreihen visualisieren. plot_timeseries_* Familie. ‚Äî plot_timeseries_slope","text":"Zeitreihen visualisieren. plot_timeseries_* Familie.","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Verwendung","title":"Zeitreihen visualisieren. plot_timeseries_* Familie. ‚Äî plot_timeseries_slope","text":"","code":"plot_timeseries_slope(   data,   x,   y,   group,   color_point = \"#0d7abc\",   color_line = \"#b3b3b3a0\" )  plot_timeseries_line(   data,   x,   y,   group,   color_line = \"#0d7abc\",   color_area = \"#6fa8dc\",   y_limits = NULL )  plot_timeseries_trend(   data,   x,   y,   method = NULL,   formula = NULL,   color_line = \"black\",   color_trend = \"#0d7abc\",   y_limits = NULL )  plot_timeseries_detrend(   data,   x,   y,   method = \"pc\",   group,   facet = TRUE,   color_line = \"#0d7abc\",   color_area = \"#6fa8dc\",   y_limits = NULL )"},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_timeseries.html","id":"argumente","dir":"Reference","previous_headings":"","what":"Argumente","title":"Zeitreihen visualisieren. plot_timeseries_* Familie. ‚Äî plot_timeseries_slope","text":"data Ein Tibble mit den Daten f√ºr den Plot. x Die Variable f√ºr die x-Achse. y Die Variable f√ºr die y-Achse. group Gruppierungsvariable f√ºr einen einzelnen Plot. color_point Farbe der Punkte. color_line Farbe f√ºr die Linie. color_area Farbe vom Bereich unter dem Linienplot. y_limits Die beiden Poole bei der Y-Achse. Mehr Infos beim Argument limits der ggplot2 Dokumentation method Methode die der Funktion verwendet wird. Variiert je nach Funktion. Mehr Infos beim Argument method der ggplot2 Dokumentation formula Berechnungsformel der Methode. Mehr Infos beim Argument formula der ggplot2 Dokumentation color_trend Farbe f√ºr die Trendlinie. facet Gruppierungsvariable um einen Plot je Teilaspekt zu machen (Facetten).","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_timeseries.html","id":"r-ckgabewert","dir":"Reference","previous_headings":"","what":"R√ºckgabewert","title":"Zeitreihen visualisieren. plot_timeseries_* Familie. ‚Äî plot_timeseries_slope","text":"ggplot object","code":""},{"path":"https://tricktracktriu.github.io/biviz/reference/plot_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Beispiele","title":"Zeitreihen visualisieren. plot_timeseries_* Familie. ‚Äî plot_timeseries_slope","text":"","code":"ggplot2::mpg |>   dplyr::group_by(year, manufacturer) |>   dplyr::summarise(hwy_by_manufacturer = mean(hwy)) |>   dplyr::ungroup() |>   plot_timeseries_slope(x = year, y = hwy_by_manufacturer, group = manufacturer) #> `summarise()` has grouped output by 'year'. You can override using the #> `.groups` argument.   stock_markets <- tsbox::ts_tbl(datasets::EuStockMarkets) |>   dplyr::mutate(time = lubridate::as_date(time))  # ein Aktienmarkt (1 Merkmal) stock_markets |>   dplyr::filter(id == \"FTSE\") |>   plot_timeseries_line(x = time, y = value, group = id)   # mehrere Aktienmaerkte (n Merkmale) stock_markets |>   dplyr::filter(id != \"FTSE\") |>   plot_timeseries_line(x = time, y = value, group = id)   # ein Aktienmarkt (1 Merkmal) stock_markets |>   dplyr::filter(id == \"FTSE\") |>   plot_timeseries_trend(x = time, y = value) #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'   # mehrere Aktienmaerkte (n Merkmale) stock_markets |>   dplyr::filter(id != \"FTSE\") |>   plot_timeseries_trend(x = time, y = value) +   # Erweiterung mit ggplot2 Funktion   ggplot2::facet_wrap(ggplot2::vars(id)) #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'   # trendbereinigte monatliche Entwicklung stock_markets |>   # zuerst die durchschnittliche   # monatliche entwicklung berechnen   dplyr::mutate(time = format(time, \"%Y-%m\")) |>   dplyr::group_by(id, time) |>   dplyr::summarise(value = mean(value)) |>   dplyr::ungroup() |>   plot_timeseries_detrend(x = time, y = value, group = id) #> `summarise()` has grouped output by 'id'. You can override using the `.groups` #> argument. #> Warning: Removed 1 row containing missing values (`geom_line()`)."}]
